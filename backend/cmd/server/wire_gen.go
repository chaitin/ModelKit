// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/GoYoko/web"
	"github.com/chaitin/ModelKit/backend/config"
	"github.com/chaitin/ModelKit/backend/db"
	"github.com/chaitin/ModelKit/backend/internal/model/handler/http/v1"
	"github.com/chaitin/ModelKit/backend/internal/model/repo"
	"github.com/chaitin/ModelKit/backend/internal/model/usecase"
	"github.com/chaitin/ModelKit/backend/pkg"
	"github.com/chaitin/ModelKit/backend/pkg/logger"
	"github.com/chaitin/ModelKit/backend/pkg/store"
	"github.com/chaitin/ModelKit/backend/pkg/version"
	"log/slog"
)

// Injectors from wire.go:

func newServer() (*Server, error) {
	configConfig, err := config.Init()
	if err != nil {
		return nil, err
	}
	web := pkg.NewWeb(configConfig)
	loggerConfig := configConfig.Logger
	slogLogger := logger.NewLogger(loggerConfig)
	client, err := store.NewEntDB(configConfig, slogLogger)
	if err != nil {
		return nil, err
	}
	modelRepo := repo.NewModelRepo(client)
	modelUsecase := usecase.NewModelUsecase(slogLogger, modelRepo, configConfig)
	modelHandler := v1.NewModelHandler(web, modelUsecase, slogLogger)
	versionInfo := version.NewVersionInfo()
	server := &Server{
		config:  configConfig,
		web:     web,
		ent:     client,
		logger:  slogLogger,
		modelV1: modelHandler,
		version: versionInfo,
	}
	return server, nil
}

// wire.go:

type Server struct {
	config  *config.Config
	web     *web.Web
	ent     *db.Client
	logger  *slog.Logger
	modelV1 *v1.ModelHandler
	version *version.VersionInfo
}
