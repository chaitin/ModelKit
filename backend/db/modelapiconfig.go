// Code generated by ent, DO NOT EDIT.

package db

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/chaitin/ModelKit/backend/db/model"
	"github.com/chaitin/ModelKit/backend/db/modelapiconfig"
	"github.com/google/uuid"
)

// ModelAPIConfig is the model entity for the ModelAPIConfig schema.
type ModelAPIConfig struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// ModelID holds the value of the "model_id" field.
	ModelID uuid.UUID `json:"model_id,omitempty"`
	// APIBase holds the value of the "api_base" field.
	APIBase string `json:"api_base,omitempty"`
	// APIKey holds the value of the "api_key" field.
	APIKey string `json:"api_key,omitempty"`
	// APIVersion holds the value of the "api_version" field.
	APIVersion string `json:"api_version,omitempty"`
	// APIHeader holds the value of the "api_header" field.
	APIHeader string `json:"api_header,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ModelAPIConfigQuery when eager-loading is set.
	Edges        ModelAPIConfigEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ModelAPIConfigEdges holds the relations/edges for other nodes in the graph.
type ModelAPIConfigEdges struct {
	// Model holds the value of the model edge.
	Model *Model `json:"model,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ModelOrErr returns the Model value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ModelAPIConfigEdges) ModelOrErr() (*Model, error) {
	if e.Model != nil {
		return e.Model, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: model.Label}
	}
	return nil, &NotLoadedError{edge: "model"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ModelAPIConfig) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case modelapiconfig.FieldAPIBase, modelapiconfig.FieldAPIKey, modelapiconfig.FieldAPIVersion, modelapiconfig.FieldAPIHeader:
			values[i] = new(sql.NullString)
		case modelapiconfig.FieldCreatedAt, modelapiconfig.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case modelapiconfig.FieldID, modelapiconfig.FieldModelID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ModelAPIConfig fields.
func (mac *ModelAPIConfig) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case modelapiconfig.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				mac.ID = *value
			}
		case modelapiconfig.FieldModelID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field model_id", values[i])
			} else if value != nil {
				mac.ModelID = *value
			}
		case modelapiconfig.FieldAPIBase:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field api_base", values[i])
			} else if value.Valid {
				mac.APIBase = value.String
			}
		case modelapiconfig.FieldAPIKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field api_key", values[i])
			} else if value.Valid {
				mac.APIKey = value.String
			}
		case modelapiconfig.FieldAPIVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field api_version", values[i])
			} else if value.Valid {
				mac.APIVersion = value.String
			}
		case modelapiconfig.FieldAPIHeader:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field api_header", values[i])
			} else if value.Valid {
				mac.APIHeader = value.String
			}
		case modelapiconfig.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				mac.CreatedAt = value.Time
			}
		case modelapiconfig.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				mac.UpdatedAt = value.Time
			}
		default:
			mac.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ModelAPIConfig.
// This includes values selected through modifiers, order, etc.
func (mac *ModelAPIConfig) Value(name string) (ent.Value, error) {
	return mac.selectValues.Get(name)
}

// QueryModel queries the "model" edge of the ModelAPIConfig entity.
func (mac *ModelAPIConfig) QueryModel() *ModelQuery {
	return NewModelAPIConfigClient(mac.config).QueryModel(mac)
}

// Update returns a builder for updating this ModelAPIConfig.
// Note that you need to call ModelAPIConfig.Unwrap() before calling this method if this ModelAPIConfig
// was returned from a transaction, and the transaction was committed or rolled back.
func (mac *ModelAPIConfig) Update() *ModelAPIConfigUpdateOne {
	return NewModelAPIConfigClient(mac.config).UpdateOne(mac)
}

// Unwrap unwraps the ModelAPIConfig entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (mac *ModelAPIConfig) Unwrap() *ModelAPIConfig {
	_tx, ok := mac.config.driver.(*txDriver)
	if !ok {
		panic("db: ModelAPIConfig is not a transactional entity")
	}
	mac.config.driver = _tx.drv
	return mac
}

// String implements the fmt.Stringer.
func (mac *ModelAPIConfig) String() string {
	var builder strings.Builder
	builder.WriteString("ModelAPIConfig(")
	builder.WriteString(fmt.Sprintf("id=%v, ", mac.ID))
	builder.WriteString("model_id=")
	builder.WriteString(fmt.Sprintf("%v", mac.ModelID))
	builder.WriteString(", ")
	builder.WriteString("api_base=")
	builder.WriteString(mac.APIBase)
	builder.WriteString(", ")
	builder.WriteString("api_key=")
	builder.WriteString(mac.APIKey)
	builder.WriteString(", ")
	builder.WriteString("api_version=")
	builder.WriteString(mac.APIVersion)
	builder.WriteString(", ")
	builder.WriteString("api_header=")
	builder.WriteString(mac.APIHeader)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(mac.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(mac.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ModelAPIConfigs is a parsable slice of ModelAPIConfig.
type ModelAPIConfigs []*ModelAPIConfig
