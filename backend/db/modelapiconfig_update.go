// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chaitin/ModelKit/backend/db/model"
	"github.com/chaitin/ModelKit/backend/db/modelapiconfig"
	"github.com/chaitin/ModelKit/backend/db/predicate"
	"github.com/google/uuid"
)

// ModelAPIConfigUpdate is the builder for updating ModelAPIConfig entities.
type ModelAPIConfigUpdate struct {
	config
	hooks     []Hook
	mutation  *ModelAPIConfigMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ModelAPIConfigUpdate builder.
func (macu *ModelAPIConfigUpdate) Where(ps ...predicate.ModelAPIConfig) *ModelAPIConfigUpdate {
	macu.mutation.Where(ps...)
	return macu
}

// SetModelID sets the "model_id" field.
func (macu *ModelAPIConfigUpdate) SetModelID(u uuid.UUID) *ModelAPIConfigUpdate {
	macu.mutation.SetModelID(u)
	return macu
}

// SetNillableModelID sets the "model_id" field if the given value is not nil.
func (macu *ModelAPIConfigUpdate) SetNillableModelID(u *uuid.UUID) *ModelAPIConfigUpdate {
	if u != nil {
		macu.SetModelID(*u)
	}
	return macu
}

// SetAPIBase sets the "api_base" field.
func (macu *ModelAPIConfigUpdate) SetAPIBase(s string) *ModelAPIConfigUpdate {
	macu.mutation.SetAPIBase(s)
	return macu
}

// SetNillableAPIBase sets the "api_base" field if the given value is not nil.
func (macu *ModelAPIConfigUpdate) SetNillableAPIBase(s *string) *ModelAPIConfigUpdate {
	if s != nil {
		macu.SetAPIBase(*s)
	}
	return macu
}

// SetAPIKey sets the "api_key" field.
func (macu *ModelAPIConfigUpdate) SetAPIKey(s string) *ModelAPIConfigUpdate {
	macu.mutation.SetAPIKey(s)
	return macu
}

// SetNillableAPIKey sets the "api_key" field if the given value is not nil.
func (macu *ModelAPIConfigUpdate) SetNillableAPIKey(s *string) *ModelAPIConfigUpdate {
	if s != nil {
		macu.SetAPIKey(*s)
	}
	return macu
}

// SetAPIVersion sets the "api_version" field.
func (macu *ModelAPIConfigUpdate) SetAPIVersion(s string) *ModelAPIConfigUpdate {
	macu.mutation.SetAPIVersion(s)
	return macu
}

// SetNillableAPIVersion sets the "api_version" field if the given value is not nil.
func (macu *ModelAPIConfigUpdate) SetNillableAPIVersion(s *string) *ModelAPIConfigUpdate {
	if s != nil {
		macu.SetAPIVersion(*s)
	}
	return macu
}

// ClearAPIVersion clears the value of the "api_version" field.
func (macu *ModelAPIConfigUpdate) ClearAPIVersion() *ModelAPIConfigUpdate {
	macu.mutation.ClearAPIVersion()
	return macu
}

// SetAPIHeader sets the "api_header" field.
func (macu *ModelAPIConfigUpdate) SetAPIHeader(s string) *ModelAPIConfigUpdate {
	macu.mutation.SetAPIHeader(s)
	return macu
}

// SetNillableAPIHeader sets the "api_header" field if the given value is not nil.
func (macu *ModelAPIConfigUpdate) SetNillableAPIHeader(s *string) *ModelAPIConfigUpdate {
	if s != nil {
		macu.SetAPIHeader(*s)
	}
	return macu
}

// ClearAPIHeader clears the value of the "api_header" field.
func (macu *ModelAPIConfigUpdate) ClearAPIHeader() *ModelAPIConfigUpdate {
	macu.mutation.ClearAPIHeader()
	return macu
}

// SetCreatedAt sets the "created_at" field.
func (macu *ModelAPIConfigUpdate) SetCreatedAt(t time.Time) *ModelAPIConfigUpdate {
	macu.mutation.SetCreatedAt(t)
	return macu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (macu *ModelAPIConfigUpdate) SetNillableCreatedAt(t *time.Time) *ModelAPIConfigUpdate {
	if t != nil {
		macu.SetCreatedAt(*t)
	}
	return macu
}

// SetUpdatedAt sets the "updated_at" field.
func (macu *ModelAPIConfigUpdate) SetUpdatedAt(t time.Time) *ModelAPIConfigUpdate {
	macu.mutation.SetUpdatedAt(t)
	return macu
}

// SetModel sets the "model" edge to the Model entity.
func (macu *ModelAPIConfigUpdate) SetModel(m *Model) *ModelAPIConfigUpdate {
	return macu.SetModelID(m.ID)
}

// Mutation returns the ModelAPIConfigMutation object of the builder.
func (macu *ModelAPIConfigUpdate) Mutation() *ModelAPIConfigMutation {
	return macu.mutation
}

// ClearModel clears the "model" edge to the Model entity.
func (macu *ModelAPIConfigUpdate) ClearModel() *ModelAPIConfigUpdate {
	macu.mutation.ClearModel()
	return macu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (macu *ModelAPIConfigUpdate) Save(ctx context.Context) (int, error) {
	macu.defaults()
	return withHooks(ctx, macu.sqlSave, macu.mutation, macu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (macu *ModelAPIConfigUpdate) SaveX(ctx context.Context) int {
	affected, err := macu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (macu *ModelAPIConfigUpdate) Exec(ctx context.Context) error {
	_, err := macu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (macu *ModelAPIConfigUpdate) ExecX(ctx context.Context) {
	if err := macu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (macu *ModelAPIConfigUpdate) defaults() {
	if _, ok := macu.mutation.UpdatedAt(); !ok {
		v := modelapiconfig.UpdateDefaultUpdatedAt()
		macu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (macu *ModelAPIConfigUpdate) check() error {
	if macu.mutation.ModelCleared() && len(macu.mutation.ModelIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "ModelAPIConfig.model"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (macu *ModelAPIConfigUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ModelAPIConfigUpdate {
	macu.modifiers = append(macu.modifiers, modifiers...)
	return macu
}

func (macu *ModelAPIConfigUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := macu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(modelapiconfig.Table, modelapiconfig.Columns, sqlgraph.NewFieldSpec(modelapiconfig.FieldID, field.TypeUUID))
	if ps := macu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := macu.mutation.APIBase(); ok {
		_spec.SetField(modelapiconfig.FieldAPIBase, field.TypeString, value)
	}
	if value, ok := macu.mutation.APIKey(); ok {
		_spec.SetField(modelapiconfig.FieldAPIKey, field.TypeString, value)
	}
	if value, ok := macu.mutation.APIVersion(); ok {
		_spec.SetField(modelapiconfig.FieldAPIVersion, field.TypeString, value)
	}
	if macu.mutation.APIVersionCleared() {
		_spec.ClearField(modelapiconfig.FieldAPIVersion, field.TypeString)
	}
	if value, ok := macu.mutation.APIHeader(); ok {
		_spec.SetField(modelapiconfig.FieldAPIHeader, field.TypeString, value)
	}
	if macu.mutation.APIHeaderCleared() {
		_spec.ClearField(modelapiconfig.FieldAPIHeader, field.TypeString)
	}
	if value, ok := macu.mutation.CreatedAt(); ok {
		_spec.SetField(modelapiconfig.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := macu.mutation.UpdatedAt(); ok {
		_spec.SetField(modelapiconfig.FieldUpdatedAt, field.TypeTime, value)
	}
	if macu.mutation.ModelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   modelapiconfig.ModelTable,
			Columns: []string{modelapiconfig.ModelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(model.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := macu.mutation.ModelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   modelapiconfig.ModelTable,
			Columns: []string{modelapiconfig.ModelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(model.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(macu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, macu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{modelapiconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	macu.mutation.done = true
	return n, nil
}

// ModelAPIConfigUpdateOne is the builder for updating a single ModelAPIConfig entity.
type ModelAPIConfigUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ModelAPIConfigMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetModelID sets the "model_id" field.
func (macuo *ModelAPIConfigUpdateOne) SetModelID(u uuid.UUID) *ModelAPIConfigUpdateOne {
	macuo.mutation.SetModelID(u)
	return macuo
}

// SetNillableModelID sets the "model_id" field if the given value is not nil.
func (macuo *ModelAPIConfigUpdateOne) SetNillableModelID(u *uuid.UUID) *ModelAPIConfigUpdateOne {
	if u != nil {
		macuo.SetModelID(*u)
	}
	return macuo
}

// SetAPIBase sets the "api_base" field.
func (macuo *ModelAPIConfigUpdateOne) SetAPIBase(s string) *ModelAPIConfigUpdateOne {
	macuo.mutation.SetAPIBase(s)
	return macuo
}

// SetNillableAPIBase sets the "api_base" field if the given value is not nil.
func (macuo *ModelAPIConfigUpdateOne) SetNillableAPIBase(s *string) *ModelAPIConfigUpdateOne {
	if s != nil {
		macuo.SetAPIBase(*s)
	}
	return macuo
}

// SetAPIKey sets the "api_key" field.
func (macuo *ModelAPIConfigUpdateOne) SetAPIKey(s string) *ModelAPIConfigUpdateOne {
	macuo.mutation.SetAPIKey(s)
	return macuo
}

// SetNillableAPIKey sets the "api_key" field if the given value is not nil.
func (macuo *ModelAPIConfigUpdateOne) SetNillableAPIKey(s *string) *ModelAPIConfigUpdateOne {
	if s != nil {
		macuo.SetAPIKey(*s)
	}
	return macuo
}

// SetAPIVersion sets the "api_version" field.
func (macuo *ModelAPIConfigUpdateOne) SetAPIVersion(s string) *ModelAPIConfigUpdateOne {
	macuo.mutation.SetAPIVersion(s)
	return macuo
}

// SetNillableAPIVersion sets the "api_version" field if the given value is not nil.
func (macuo *ModelAPIConfigUpdateOne) SetNillableAPIVersion(s *string) *ModelAPIConfigUpdateOne {
	if s != nil {
		macuo.SetAPIVersion(*s)
	}
	return macuo
}

// ClearAPIVersion clears the value of the "api_version" field.
func (macuo *ModelAPIConfigUpdateOne) ClearAPIVersion() *ModelAPIConfigUpdateOne {
	macuo.mutation.ClearAPIVersion()
	return macuo
}

// SetAPIHeader sets the "api_header" field.
func (macuo *ModelAPIConfigUpdateOne) SetAPIHeader(s string) *ModelAPIConfigUpdateOne {
	macuo.mutation.SetAPIHeader(s)
	return macuo
}

// SetNillableAPIHeader sets the "api_header" field if the given value is not nil.
func (macuo *ModelAPIConfigUpdateOne) SetNillableAPIHeader(s *string) *ModelAPIConfigUpdateOne {
	if s != nil {
		macuo.SetAPIHeader(*s)
	}
	return macuo
}

// ClearAPIHeader clears the value of the "api_header" field.
func (macuo *ModelAPIConfigUpdateOne) ClearAPIHeader() *ModelAPIConfigUpdateOne {
	macuo.mutation.ClearAPIHeader()
	return macuo
}

// SetCreatedAt sets the "created_at" field.
func (macuo *ModelAPIConfigUpdateOne) SetCreatedAt(t time.Time) *ModelAPIConfigUpdateOne {
	macuo.mutation.SetCreatedAt(t)
	return macuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (macuo *ModelAPIConfigUpdateOne) SetNillableCreatedAt(t *time.Time) *ModelAPIConfigUpdateOne {
	if t != nil {
		macuo.SetCreatedAt(*t)
	}
	return macuo
}

// SetUpdatedAt sets the "updated_at" field.
func (macuo *ModelAPIConfigUpdateOne) SetUpdatedAt(t time.Time) *ModelAPIConfigUpdateOne {
	macuo.mutation.SetUpdatedAt(t)
	return macuo
}

// SetModel sets the "model" edge to the Model entity.
func (macuo *ModelAPIConfigUpdateOne) SetModel(m *Model) *ModelAPIConfigUpdateOne {
	return macuo.SetModelID(m.ID)
}

// Mutation returns the ModelAPIConfigMutation object of the builder.
func (macuo *ModelAPIConfigUpdateOne) Mutation() *ModelAPIConfigMutation {
	return macuo.mutation
}

// ClearModel clears the "model" edge to the Model entity.
func (macuo *ModelAPIConfigUpdateOne) ClearModel() *ModelAPIConfigUpdateOne {
	macuo.mutation.ClearModel()
	return macuo
}

// Where appends a list predicates to the ModelAPIConfigUpdate builder.
func (macuo *ModelAPIConfigUpdateOne) Where(ps ...predicate.ModelAPIConfig) *ModelAPIConfigUpdateOne {
	macuo.mutation.Where(ps...)
	return macuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (macuo *ModelAPIConfigUpdateOne) Select(field string, fields ...string) *ModelAPIConfigUpdateOne {
	macuo.fields = append([]string{field}, fields...)
	return macuo
}

// Save executes the query and returns the updated ModelAPIConfig entity.
func (macuo *ModelAPIConfigUpdateOne) Save(ctx context.Context) (*ModelAPIConfig, error) {
	macuo.defaults()
	return withHooks(ctx, macuo.sqlSave, macuo.mutation, macuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (macuo *ModelAPIConfigUpdateOne) SaveX(ctx context.Context) *ModelAPIConfig {
	node, err := macuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (macuo *ModelAPIConfigUpdateOne) Exec(ctx context.Context) error {
	_, err := macuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (macuo *ModelAPIConfigUpdateOne) ExecX(ctx context.Context) {
	if err := macuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (macuo *ModelAPIConfigUpdateOne) defaults() {
	if _, ok := macuo.mutation.UpdatedAt(); !ok {
		v := modelapiconfig.UpdateDefaultUpdatedAt()
		macuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (macuo *ModelAPIConfigUpdateOne) check() error {
	if macuo.mutation.ModelCleared() && len(macuo.mutation.ModelIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "ModelAPIConfig.model"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (macuo *ModelAPIConfigUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ModelAPIConfigUpdateOne {
	macuo.modifiers = append(macuo.modifiers, modifiers...)
	return macuo
}

func (macuo *ModelAPIConfigUpdateOne) sqlSave(ctx context.Context) (_node *ModelAPIConfig, err error) {
	if err := macuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(modelapiconfig.Table, modelapiconfig.Columns, sqlgraph.NewFieldSpec(modelapiconfig.FieldID, field.TypeUUID))
	id, ok := macuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "ModelAPIConfig.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := macuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, modelapiconfig.FieldID)
		for _, f := range fields {
			if !modelapiconfig.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != modelapiconfig.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := macuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := macuo.mutation.APIBase(); ok {
		_spec.SetField(modelapiconfig.FieldAPIBase, field.TypeString, value)
	}
	if value, ok := macuo.mutation.APIKey(); ok {
		_spec.SetField(modelapiconfig.FieldAPIKey, field.TypeString, value)
	}
	if value, ok := macuo.mutation.APIVersion(); ok {
		_spec.SetField(modelapiconfig.FieldAPIVersion, field.TypeString, value)
	}
	if macuo.mutation.APIVersionCleared() {
		_spec.ClearField(modelapiconfig.FieldAPIVersion, field.TypeString)
	}
	if value, ok := macuo.mutation.APIHeader(); ok {
		_spec.SetField(modelapiconfig.FieldAPIHeader, field.TypeString, value)
	}
	if macuo.mutation.APIHeaderCleared() {
		_spec.ClearField(modelapiconfig.FieldAPIHeader, field.TypeString)
	}
	if value, ok := macuo.mutation.CreatedAt(); ok {
		_spec.SetField(modelapiconfig.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := macuo.mutation.UpdatedAt(); ok {
		_spec.SetField(modelapiconfig.FieldUpdatedAt, field.TypeTime, value)
	}
	if macuo.mutation.ModelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   modelapiconfig.ModelTable,
			Columns: []string{modelapiconfig.ModelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(model.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := macuo.mutation.ModelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   modelapiconfig.ModelTable,
			Columns: []string{modelapiconfig.ModelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(model.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(macuo.modifiers...)
	_node = &ModelAPIConfig{config: macuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, macuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{modelapiconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	macuo.mutation.done = true
	return _node, nil
}
