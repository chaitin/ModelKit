// Code generated by ent, DO NOT EDIT.

package modelapiconfig

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/chaitin/ModelKit/backend/db/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.ModelAPIConfig {
	return predicate.ModelAPIConfig(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.ModelAPIConfig {
	return predicate.ModelAPIConfig(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.ModelAPIConfig {
	return predicate.ModelAPIConfig(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.ModelAPIConfig {
	return predicate.ModelAPIConfig(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.ModelAPIConfig {
	return predicate.ModelAPIConfig(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.ModelAPIConfig {
	return predicate.ModelAPIConfig(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.ModelAPIConfig {
	return predicate.ModelAPIConfig(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.ModelAPIConfig {
	return predicate.ModelAPIConfig(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.ModelAPIConfig {
	return predicate.ModelAPIConfig(sql.FieldLTE(FieldID, id))
}

// ModelID applies equality check predicate on the "model_id" field. It's identical to ModelIDEQ.
func ModelID(v uuid.UUID) predicate.ModelAPIConfig {
	return predicate.ModelAPIConfig(sql.FieldEQ(FieldModelID, v))
}

// APIBase applies equality check predicate on the "api_base" field. It's identical to APIBaseEQ.
func APIBase(v string) predicate.ModelAPIConfig {
	return predicate.ModelAPIConfig(sql.FieldEQ(FieldAPIBase, v))
}

// APIKey applies equality check predicate on the "api_key" field. It's identical to APIKeyEQ.
func APIKey(v string) predicate.ModelAPIConfig {
	return predicate.ModelAPIConfig(sql.FieldEQ(FieldAPIKey, v))
}

// APIVersion applies equality check predicate on the "api_version" field. It's identical to APIVersionEQ.
func APIVersion(v string) predicate.ModelAPIConfig {
	return predicate.ModelAPIConfig(sql.FieldEQ(FieldAPIVersion, v))
}

// APIHeader applies equality check predicate on the "api_header" field. It's identical to APIHeaderEQ.
func APIHeader(v string) predicate.ModelAPIConfig {
	return predicate.ModelAPIConfig(sql.FieldEQ(FieldAPIHeader, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ModelAPIConfig {
	return predicate.ModelAPIConfig(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ModelAPIConfig {
	return predicate.ModelAPIConfig(sql.FieldEQ(FieldUpdatedAt, v))
}

// ModelIDEQ applies the EQ predicate on the "model_id" field.
func ModelIDEQ(v uuid.UUID) predicate.ModelAPIConfig {
	return predicate.ModelAPIConfig(sql.FieldEQ(FieldModelID, v))
}

// ModelIDNEQ applies the NEQ predicate on the "model_id" field.
func ModelIDNEQ(v uuid.UUID) predicate.ModelAPIConfig {
	return predicate.ModelAPIConfig(sql.FieldNEQ(FieldModelID, v))
}

// ModelIDIn applies the In predicate on the "model_id" field.
func ModelIDIn(vs ...uuid.UUID) predicate.ModelAPIConfig {
	return predicate.ModelAPIConfig(sql.FieldIn(FieldModelID, vs...))
}

// ModelIDNotIn applies the NotIn predicate on the "model_id" field.
func ModelIDNotIn(vs ...uuid.UUID) predicate.ModelAPIConfig {
	return predicate.ModelAPIConfig(sql.FieldNotIn(FieldModelID, vs...))
}

// APIBaseEQ applies the EQ predicate on the "api_base" field.
func APIBaseEQ(v string) predicate.ModelAPIConfig {
	return predicate.ModelAPIConfig(sql.FieldEQ(FieldAPIBase, v))
}

// APIBaseNEQ applies the NEQ predicate on the "api_base" field.
func APIBaseNEQ(v string) predicate.ModelAPIConfig {
	return predicate.ModelAPIConfig(sql.FieldNEQ(FieldAPIBase, v))
}

// APIBaseIn applies the In predicate on the "api_base" field.
func APIBaseIn(vs ...string) predicate.ModelAPIConfig {
	return predicate.ModelAPIConfig(sql.FieldIn(FieldAPIBase, vs...))
}

// APIBaseNotIn applies the NotIn predicate on the "api_base" field.
func APIBaseNotIn(vs ...string) predicate.ModelAPIConfig {
	return predicate.ModelAPIConfig(sql.FieldNotIn(FieldAPIBase, vs...))
}

// APIBaseGT applies the GT predicate on the "api_base" field.
func APIBaseGT(v string) predicate.ModelAPIConfig {
	return predicate.ModelAPIConfig(sql.FieldGT(FieldAPIBase, v))
}

// APIBaseGTE applies the GTE predicate on the "api_base" field.
func APIBaseGTE(v string) predicate.ModelAPIConfig {
	return predicate.ModelAPIConfig(sql.FieldGTE(FieldAPIBase, v))
}

// APIBaseLT applies the LT predicate on the "api_base" field.
func APIBaseLT(v string) predicate.ModelAPIConfig {
	return predicate.ModelAPIConfig(sql.FieldLT(FieldAPIBase, v))
}

// APIBaseLTE applies the LTE predicate on the "api_base" field.
func APIBaseLTE(v string) predicate.ModelAPIConfig {
	return predicate.ModelAPIConfig(sql.FieldLTE(FieldAPIBase, v))
}

// APIBaseContains applies the Contains predicate on the "api_base" field.
func APIBaseContains(v string) predicate.ModelAPIConfig {
	return predicate.ModelAPIConfig(sql.FieldContains(FieldAPIBase, v))
}

// APIBaseHasPrefix applies the HasPrefix predicate on the "api_base" field.
func APIBaseHasPrefix(v string) predicate.ModelAPIConfig {
	return predicate.ModelAPIConfig(sql.FieldHasPrefix(FieldAPIBase, v))
}

// APIBaseHasSuffix applies the HasSuffix predicate on the "api_base" field.
func APIBaseHasSuffix(v string) predicate.ModelAPIConfig {
	return predicate.ModelAPIConfig(sql.FieldHasSuffix(FieldAPIBase, v))
}

// APIBaseEqualFold applies the EqualFold predicate on the "api_base" field.
func APIBaseEqualFold(v string) predicate.ModelAPIConfig {
	return predicate.ModelAPIConfig(sql.FieldEqualFold(FieldAPIBase, v))
}

// APIBaseContainsFold applies the ContainsFold predicate on the "api_base" field.
func APIBaseContainsFold(v string) predicate.ModelAPIConfig {
	return predicate.ModelAPIConfig(sql.FieldContainsFold(FieldAPIBase, v))
}

// APIKeyEQ applies the EQ predicate on the "api_key" field.
func APIKeyEQ(v string) predicate.ModelAPIConfig {
	return predicate.ModelAPIConfig(sql.FieldEQ(FieldAPIKey, v))
}

// APIKeyNEQ applies the NEQ predicate on the "api_key" field.
func APIKeyNEQ(v string) predicate.ModelAPIConfig {
	return predicate.ModelAPIConfig(sql.FieldNEQ(FieldAPIKey, v))
}

// APIKeyIn applies the In predicate on the "api_key" field.
func APIKeyIn(vs ...string) predicate.ModelAPIConfig {
	return predicate.ModelAPIConfig(sql.FieldIn(FieldAPIKey, vs...))
}

// APIKeyNotIn applies the NotIn predicate on the "api_key" field.
func APIKeyNotIn(vs ...string) predicate.ModelAPIConfig {
	return predicate.ModelAPIConfig(sql.FieldNotIn(FieldAPIKey, vs...))
}

// APIKeyGT applies the GT predicate on the "api_key" field.
func APIKeyGT(v string) predicate.ModelAPIConfig {
	return predicate.ModelAPIConfig(sql.FieldGT(FieldAPIKey, v))
}

// APIKeyGTE applies the GTE predicate on the "api_key" field.
func APIKeyGTE(v string) predicate.ModelAPIConfig {
	return predicate.ModelAPIConfig(sql.FieldGTE(FieldAPIKey, v))
}

// APIKeyLT applies the LT predicate on the "api_key" field.
func APIKeyLT(v string) predicate.ModelAPIConfig {
	return predicate.ModelAPIConfig(sql.FieldLT(FieldAPIKey, v))
}

// APIKeyLTE applies the LTE predicate on the "api_key" field.
func APIKeyLTE(v string) predicate.ModelAPIConfig {
	return predicate.ModelAPIConfig(sql.FieldLTE(FieldAPIKey, v))
}

// APIKeyContains applies the Contains predicate on the "api_key" field.
func APIKeyContains(v string) predicate.ModelAPIConfig {
	return predicate.ModelAPIConfig(sql.FieldContains(FieldAPIKey, v))
}

// APIKeyHasPrefix applies the HasPrefix predicate on the "api_key" field.
func APIKeyHasPrefix(v string) predicate.ModelAPIConfig {
	return predicate.ModelAPIConfig(sql.FieldHasPrefix(FieldAPIKey, v))
}

// APIKeyHasSuffix applies the HasSuffix predicate on the "api_key" field.
func APIKeyHasSuffix(v string) predicate.ModelAPIConfig {
	return predicate.ModelAPIConfig(sql.FieldHasSuffix(FieldAPIKey, v))
}

// APIKeyEqualFold applies the EqualFold predicate on the "api_key" field.
func APIKeyEqualFold(v string) predicate.ModelAPIConfig {
	return predicate.ModelAPIConfig(sql.FieldEqualFold(FieldAPIKey, v))
}

// APIKeyContainsFold applies the ContainsFold predicate on the "api_key" field.
func APIKeyContainsFold(v string) predicate.ModelAPIConfig {
	return predicate.ModelAPIConfig(sql.FieldContainsFold(FieldAPIKey, v))
}

// APIVersionEQ applies the EQ predicate on the "api_version" field.
func APIVersionEQ(v string) predicate.ModelAPIConfig {
	return predicate.ModelAPIConfig(sql.FieldEQ(FieldAPIVersion, v))
}

// APIVersionNEQ applies the NEQ predicate on the "api_version" field.
func APIVersionNEQ(v string) predicate.ModelAPIConfig {
	return predicate.ModelAPIConfig(sql.FieldNEQ(FieldAPIVersion, v))
}

// APIVersionIn applies the In predicate on the "api_version" field.
func APIVersionIn(vs ...string) predicate.ModelAPIConfig {
	return predicate.ModelAPIConfig(sql.FieldIn(FieldAPIVersion, vs...))
}

// APIVersionNotIn applies the NotIn predicate on the "api_version" field.
func APIVersionNotIn(vs ...string) predicate.ModelAPIConfig {
	return predicate.ModelAPIConfig(sql.FieldNotIn(FieldAPIVersion, vs...))
}

// APIVersionGT applies the GT predicate on the "api_version" field.
func APIVersionGT(v string) predicate.ModelAPIConfig {
	return predicate.ModelAPIConfig(sql.FieldGT(FieldAPIVersion, v))
}

// APIVersionGTE applies the GTE predicate on the "api_version" field.
func APIVersionGTE(v string) predicate.ModelAPIConfig {
	return predicate.ModelAPIConfig(sql.FieldGTE(FieldAPIVersion, v))
}

// APIVersionLT applies the LT predicate on the "api_version" field.
func APIVersionLT(v string) predicate.ModelAPIConfig {
	return predicate.ModelAPIConfig(sql.FieldLT(FieldAPIVersion, v))
}

// APIVersionLTE applies the LTE predicate on the "api_version" field.
func APIVersionLTE(v string) predicate.ModelAPIConfig {
	return predicate.ModelAPIConfig(sql.FieldLTE(FieldAPIVersion, v))
}

// APIVersionContains applies the Contains predicate on the "api_version" field.
func APIVersionContains(v string) predicate.ModelAPIConfig {
	return predicate.ModelAPIConfig(sql.FieldContains(FieldAPIVersion, v))
}

// APIVersionHasPrefix applies the HasPrefix predicate on the "api_version" field.
func APIVersionHasPrefix(v string) predicate.ModelAPIConfig {
	return predicate.ModelAPIConfig(sql.FieldHasPrefix(FieldAPIVersion, v))
}

// APIVersionHasSuffix applies the HasSuffix predicate on the "api_version" field.
func APIVersionHasSuffix(v string) predicate.ModelAPIConfig {
	return predicate.ModelAPIConfig(sql.FieldHasSuffix(FieldAPIVersion, v))
}

// APIVersionIsNil applies the IsNil predicate on the "api_version" field.
func APIVersionIsNil() predicate.ModelAPIConfig {
	return predicate.ModelAPIConfig(sql.FieldIsNull(FieldAPIVersion))
}

// APIVersionNotNil applies the NotNil predicate on the "api_version" field.
func APIVersionNotNil() predicate.ModelAPIConfig {
	return predicate.ModelAPIConfig(sql.FieldNotNull(FieldAPIVersion))
}

// APIVersionEqualFold applies the EqualFold predicate on the "api_version" field.
func APIVersionEqualFold(v string) predicate.ModelAPIConfig {
	return predicate.ModelAPIConfig(sql.FieldEqualFold(FieldAPIVersion, v))
}

// APIVersionContainsFold applies the ContainsFold predicate on the "api_version" field.
func APIVersionContainsFold(v string) predicate.ModelAPIConfig {
	return predicate.ModelAPIConfig(sql.FieldContainsFold(FieldAPIVersion, v))
}

// APIHeaderEQ applies the EQ predicate on the "api_header" field.
func APIHeaderEQ(v string) predicate.ModelAPIConfig {
	return predicate.ModelAPIConfig(sql.FieldEQ(FieldAPIHeader, v))
}

// APIHeaderNEQ applies the NEQ predicate on the "api_header" field.
func APIHeaderNEQ(v string) predicate.ModelAPIConfig {
	return predicate.ModelAPIConfig(sql.FieldNEQ(FieldAPIHeader, v))
}

// APIHeaderIn applies the In predicate on the "api_header" field.
func APIHeaderIn(vs ...string) predicate.ModelAPIConfig {
	return predicate.ModelAPIConfig(sql.FieldIn(FieldAPIHeader, vs...))
}

// APIHeaderNotIn applies the NotIn predicate on the "api_header" field.
func APIHeaderNotIn(vs ...string) predicate.ModelAPIConfig {
	return predicate.ModelAPIConfig(sql.FieldNotIn(FieldAPIHeader, vs...))
}

// APIHeaderGT applies the GT predicate on the "api_header" field.
func APIHeaderGT(v string) predicate.ModelAPIConfig {
	return predicate.ModelAPIConfig(sql.FieldGT(FieldAPIHeader, v))
}

// APIHeaderGTE applies the GTE predicate on the "api_header" field.
func APIHeaderGTE(v string) predicate.ModelAPIConfig {
	return predicate.ModelAPIConfig(sql.FieldGTE(FieldAPIHeader, v))
}

// APIHeaderLT applies the LT predicate on the "api_header" field.
func APIHeaderLT(v string) predicate.ModelAPIConfig {
	return predicate.ModelAPIConfig(sql.FieldLT(FieldAPIHeader, v))
}

// APIHeaderLTE applies the LTE predicate on the "api_header" field.
func APIHeaderLTE(v string) predicate.ModelAPIConfig {
	return predicate.ModelAPIConfig(sql.FieldLTE(FieldAPIHeader, v))
}

// APIHeaderContains applies the Contains predicate on the "api_header" field.
func APIHeaderContains(v string) predicate.ModelAPIConfig {
	return predicate.ModelAPIConfig(sql.FieldContains(FieldAPIHeader, v))
}

// APIHeaderHasPrefix applies the HasPrefix predicate on the "api_header" field.
func APIHeaderHasPrefix(v string) predicate.ModelAPIConfig {
	return predicate.ModelAPIConfig(sql.FieldHasPrefix(FieldAPIHeader, v))
}

// APIHeaderHasSuffix applies the HasSuffix predicate on the "api_header" field.
func APIHeaderHasSuffix(v string) predicate.ModelAPIConfig {
	return predicate.ModelAPIConfig(sql.FieldHasSuffix(FieldAPIHeader, v))
}

// APIHeaderIsNil applies the IsNil predicate on the "api_header" field.
func APIHeaderIsNil() predicate.ModelAPIConfig {
	return predicate.ModelAPIConfig(sql.FieldIsNull(FieldAPIHeader))
}

// APIHeaderNotNil applies the NotNil predicate on the "api_header" field.
func APIHeaderNotNil() predicate.ModelAPIConfig {
	return predicate.ModelAPIConfig(sql.FieldNotNull(FieldAPIHeader))
}

// APIHeaderEqualFold applies the EqualFold predicate on the "api_header" field.
func APIHeaderEqualFold(v string) predicate.ModelAPIConfig {
	return predicate.ModelAPIConfig(sql.FieldEqualFold(FieldAPIHeader, v))
}

// APIHeaderContainsFold applies the ContainsFold predicate on the "api_header" field.
func APIHeaderContainsFold(v string) predicate.ModelAPIConfig {
	return predicate.ModelAPIConfig(sql.FieldContainsFold(FieldAPIHeader, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ModelAPIConfig {
	return predicate.ModelAPIConfig(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ModelAPIConfig {
	return predicate.ModelAPIConfig(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ModelAPIConfig {
	return predicate.ModelAPIConfig(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ModelAPIConfig {
	return predicate.ModelAPIConfig(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ModelAPIConfig {
	return predicate.ModelAPIConfig(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ModelAPIConfig {
	return predicate.ModelAPIConfig(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ModelAPIConfig {
	return predicate.ModelAPIConfig(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ModelAPIConfig {
	return predicate.ModelAPIConfig(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ModelAPIConfig {
	return predicate.ModelAPIConfig(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ModelAPIConfig {
	return predicate.ModelAPIConfig(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ModelAPIConfig {
	return predicate.ModelAPIConfig(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ModelAPIConfig {
	return predicate.ModelAPIConfig(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ModelAPIConfig {
	return predicate.ModelAPIConfig(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ModelAPIConfig {
	return predicate.ModelAPIConfig(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ModelAPIConfig {
	return predicate.ModelAPIConfig(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ModelAPIConfig {
	return predicate.ModelAPIConfig(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasModel applies the HasEdge predicate on the "model" edge.
func HasModel() predicate.ModelAPIConfig {
	return predicate.ModelAPIConfig(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, ModelTable, ModelColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasModelWith applies the HasEdge predicate on the "model" edge with a given conditions (other predicates).
func HasModelWith(preds ...predicate.Model) predicate.ModelAPIConfig {
	return predicate.ModelAPIConfig(func(s *sql.Selector) {
		step := newModelStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ModelAPIConfig) predicate.ModelAPIConfig {
	return predicate.ModelAPIConfig(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ModelAPIConfig) predicate.ModelAPIConfig {
	return predicate.ModelAPIConfig(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ModelAPIConfig) predicate.ModelAPIConfig {
	return predicate.ModelAPIConfig(sql.NotPredicates(p))
}
