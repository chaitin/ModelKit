// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chaitin/ModelKit/backend/db/model"
	"github.com/chaitin/ModelKit/backend/db/modelapiconfig"
	"github.com/google/uuid"
)

// ModelAPIConfigCreate is the builder for creating a ModelAPIConfig entity.
type ModelAPIConfigCreate struct {
	config
	mutation *ModelAPIConfigMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetModelID sets the "model_id" field.
func (macc *ModelAPIConfigCreate) SetModelID(u uuid.UUID) *ModelAPIConfigCreate {
	macc.mutation.SetModelID(u)
	return macc
}

// SetAPIBase sets the "api_base" field.
func (macc *ModelAPIConfigCreate) SetAPIBase(s string) *ModelAPIConfigCreate {
	macc.mutation.SetAPIBase(s)
	return macc
}

// SetAPIKey sets the "api_key" field.
func (macc *ModelAPIConfigCreate) SetAPIKey(s string) *ModelAPIConfigCreate {
	macc.mutation.SetAPIKey(s)
	return macc
}

// SetAPIVersion sets the "api_version" field.
func (macc *ModelAPIConfigCreate) SetAPIVersion(s string) *ModelAPIConfigCreate {
	macc.mutation.SetAPIVersion(s)
	return macc
}

// SetNillableAPIVersion sets the "api_version" field if the given value is not nil.
func (macc *ModelAPIConfigCreate) SetNillableAPIVersion(s *string) *ModelAPIConfigCreate {
	if s != nil {
		macc.SetAPIVersion(*s)
	}
	return macc
}

// SetAPIHeader sets the "api_header" field.
func (macc *ModelAPIConfigCreate) SetAPIHeader(s string) *ModelAPIConfigCreate {
	macc.mutation.SetAPIHeader(s)
	return macc
}

// SetNillableAPIHeader sets the "api_header" field if the given value is not nil.
func (macc *ModelAPIConfigCreate) SetNillableAPIHeader(s *string) *ModelAPIConfigCreate {
	if s != nil {
		macc.SetAPIHeader(*s)
	}
	return macc
}

// SetCreatedAt sets the "created_at" field.
func (macc *ModelAPIConfigCreate) SetCreatedAt(t time.Time) *ModelAPIConfigCreate {
	macc.mutation.SetCreatedAt(t)
	return macc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (macc *ModelAPIConfigCreate) SetNillableCreatedAt(t *time.Time) *ModelAPIConfigCreate {
	if t != nil {
		macc.SetCreatedAt(*t)
	}
	return macc
}

// SetUpdatedAt sets the "updated_at" field.
func (macc *ModelAPIConfigCreate) SetUpdatedAt(t time.Time) *ModelAPIConfigCreate {
	macc.mutation.SetUpdatedAt(t)
	return macc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (macc *ModelAPIConfigCreate) SetNillableUpdatedAt(t *time.Time) *ModelAPIConfigCreate {
	if t != nil {
		macc.SetUpdatedAt(*t)
	}
	return macc
}

// SetID sets the "id" field.
func (macc *ModelAPIConfigCreate) SetID(u uuid.UUID) *ModelAPIConfigCreate {
	macc.mutation.SetID(u)
	return macc
}

// SetModel sets the "model" edge to the Model entity.
func (macc *ModelAPIConfigCreate) SetModel(m *Model) *ModelAPIConfigCreate {
	return macc.SetModelID(m.ID)
}

// Mutation returns the ModelAPIConfigMutation object of the builder.
func (macc *ModelAPIConfigCreate) Mutation() *ModelAPIConfigMutation {
	return macc.mutation
}

// Save creates the ModelAPIConfig in the database.
func (macc *ModelAPIConfigCreate) Save(ctx context.Context) (*ModelAPIConfig, error) {
	macc.defaults()
	return withHooks(ctx, macc.sqlSave, macc.mutation, macc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (macc *ModelAPIConfigCreate) SaveX(ctx context.Context) *ModelAPIConfig {
	v, err := macc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (macc *ModelAPIConfigCreate) Exec(ctx context.Context) error {
	_, err := macc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (macc *ModelAPIConfigCreate) ExecX(ctx context.Context) {
	if err := macc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (macc *ModelAPIConfigCreate) defaults() {
	if _, ok := macc.mutation.CreatedAt(); !ok {
		v := modelapiconfig.DefaultCreatedAt()
		macc.mutation.SetCreatedAt(v)
	}
	if _, ok := macc.mutation.UpdatedAt(); !ok {
		v := modelapiconfig.DefaultUpdatedAt()
		macc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (macc *ModelAPIConfigCreate) check() error {
	if _, ok := macc.mutation.ModelID(); !ok {
		return &ValidationError{Name: "model_id", err: errors.New(`db: missing required field "ModelAPIConfig.model_id"`)}
	}
	if _, ok := macc.mutation.APIBase(); !ok {
		return &ValidationError{Name: "api_base", err: errors.New(`db: missing required field "ModelAPIConfig.api_base"`)}
	}
	if _, ok := macc.mutation.APIKey(); !ok {
		return &ValidationError{Name: "api_key", err: errors.New(`db: missing required field "ModelAPIConfig.api_key"`)}
	}
	if _, ok := macc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "ModelAPIConfig.created_at"`)}
	}
	if _, ok := macc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`db: missing required field "ModelAPIConfig.updated_at"`)}
	}
	if len(macc.mutation.ModelIDs()) == 0 {
		return &ValidationError{Name: "model", err: errors.New(`db: missing required edge "ModelAPIConfig.model"`)}
	}
	return nil
}

func (macc *ModelAPIConfigCreate) sqlSave(ctx context.Context) (*ModelAPIConfig, error) {
	if err := macc.check(); err != nil {
		return nil, err
	}
	_node, _spec := macc.createSpec()
	if err := sqlgraph.CreateNode(ctx, macc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	macc.mutation.id = &_node.ID
	macc.mutation.done = true
	return _node, nil
}

func (macc *ModelAPIConfigCreate) createSpec() (*ModelAPIConfig, *sqlgraph.CreateSpec) {
	var (
		_node = &ModelAPIConfig{config: macc.config}
		_spec = sqlgraph.NewCreateSpec(modelapiconfig.Table, sqlgraph.NewFieldSpec(modelapiconfig.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = macc.conflict
	if id, ok := macc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := macc.mutation.APIBase(); ok {
		_spec.SetField(modelapiconfig.FieldAPIBase, field.TypeString, value)
		_node.APIBase = value
	}
	if value, ok := macc.mutation.APIKey(); ok {
		_spec.SetField(modelapiconfig.FieldAPIKey, field.TypeString, value)
		_node.APIKey = value
	}
	if value, ok := macc.mutation.APIVersion(); ok {
		_spec.SetField(modelapiconfig.FieldAPIVersion, field.TypeString, value)
		_node.APIVersion = value
	}
	if value, ok := macc.mutation.APIHeader(); ok {
		_spec.SetField(modelapiconfig.FieldAPIHeader, field.TypeString, value)
		_node.APIHeader = value
	}
	if value, ok := macc.mutation.CreatedAt(); ok {
		_spec.SetField(modelapiconfig.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := macc.mutation.UpdatedAt(); ok {
		_spec.SetField(modelapiconfig.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := macc.mutation.ModelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   modelapiconfig.ModelTable,
			Columns: []string{modelapiconfig.ModelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(model.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ModelID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ModelAPIConfig.Create().
//		SetModelID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ModelAPIConfigUpsert) {
//			SetModelID(v+v).
//		}).
//		Exec(ctx)
func (macc *ModelAPIConfigCreate) OnConflict(opts ...sql.ConflictOption) *ModelAPIConfigUpsertOne {
	macc.conflict = opts
	return &ModelAPIConfigUpsertOne{
		create: macc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ModelAPIConfig.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (macc *ModelAPIConfigCreate) OnConflictColumns(columns ...string) *ModelAPIConfigUpsertOne {
	macc.conflict = append(macc.conflict, sql.ConflictColumns(columns...))
	return &ModelAPIConfigUpsertOne{
		create: macc,
	}
}

type (
	// ModelAPIConfigUpsertOne is the builder for "upsert"-ing
	//  one ModelAPIConfig node.
	ModelAPIConfigUpsertOne struct {
		create *ModelAPIConfigCreate
	}

	// ModelAPIConfigUpsert is the "OnConflict" setter.
	ModelAPIConfigUpsert struct {
		*sql.UpdateSet
	}
)

// SetModelID sets the "model_id" field.
func (u *ModelAPIConfigUpsert) SetModelID(v uuid.UUID) *ModelAPIConfigUpsert {
	u.Set(modelapiconfig.FieldModelID, v)
	return u
}

// UpdateModelID sets the "model_id" field to the value that was provided on create.
func (u *ModelAPIConfigUpsert) UpdateModelID() *ModelAPIConfigUpsert {
	u.SetExcluded(modelapiconfig.FieldModelID)
	return u
}

// SetAPIBase sets the "api_base" field.
func (u *ModelAPIConfigUpsert) SetAPIBase(v string) *ModelAPIConfigUpsert {
	u.Set(modelapiconfig.FieldAPIBase, v)
	return u
}

// UpdateAPIBase sets the "api_base" field to the value that was provided on create.
func (u *ModelAPIConfigUpsert) UpdateAPIBase() *ModelAPIConfigUpsert {
	u.SetExcluded(modelapiconfig.FieldAPIBase)
	return u
}

// SetAPIKey sets the "api_key" field.
func (u *ModelAPIConfigUpsert) SetAPIKey(v string) *ModelAPIConfigUpsert {
	u.Set(modelapiconfig.FieldAPIKey, v)
	return u
}

// UpdateAPIKey sets the "api_key" field to the value that was provided on create.
func (u *ModelAPIConfigUpsert) UpdateAPIKey() *ModelAPIConfigUpsert {
	u.SetExcluded(modelapiconfig.FieldAPIKey)
	return u
}

// SetAPIVersion sets the "api_version" field.
func (u *ModelAPIConfigUpsert) SetAPIVersion(v string) *ModelAPIConfigUpsert {
	u.Set(modelapiconfig.FieldAPIVersion, v)
	return u
}

// UpdateAPIVersion sets the "api_version" field to the value that was provided on create.
func (u *ModelAPIConfigUpsert) UpdateAPIVersion() *ModelAPIConfigUpsert {
	u.SetExcluded(modelapiconfig.FieldAPIVersion)
	return u
}

// ClearAPIVersion clears the value of the "api_version" field.
func (u *ModelAPIConfigUpsert) ClearAPIVersion() *ModelAPIConfigUpsert {
	u.SetNull(modelapiconfig.FieldAPIVersion)
	return u
}

// SetAPIHeader sets the "api_header" field.
func (u *ModelAPIConfigUpsert) SetAPIHeader(v string) *ModelAPIConfigUpsert {
	u.Set(modelapiconfig.FieldAPIHeader, v)
	return u
}

// UpdateAPIHeader sets the "api_header" field to the value that was provided on create.
func (u *ModelAPIConfigUpsert) UpdateAPIHeader() *ModelAPIConfigUpsert {
	u.SetExcluded(modelapiconfig.FieldAPIHeader)
	return u
}

// ClearAPIHeader clears the value of the "api_header" field.
func (u *ModelAPIConfigUpsert) ClearAPIHeader() *ModelAPIConfigUpsert {
	u.SetNull(modelapiconfig.FieldAPIHeader)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *ModelAPIConfigUpsert) SetCreatedAt(v time.Time) *ModelAPIConfigUpsert {
	u.Set(modelapiconfig.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ModelAPIConfigUpsert) UpdateCreatedAt() *ModelAPIConfigUpsert {
	u.SetExcluded(modelapiconfig.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ModelAPIConfigUpsert) SetUpdatedAt(v time.Time) *ModelAPIConfigUpsert {
	u.Set(modelapiconfig.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ModelAPIConfigUpsert) UpdateUpdatedAt() *ModelAPIConfigUpsert {
	u.SetExcluded(modelapiconfig.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ModelAPIConfig.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(modelapiconfig.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ModelAPIConfigUpsertOne) UpdateNewValues() *ModelAPIConfigUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(modelapiconfig.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ModelAPIConfig.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ModelAPIConfigUpsertOne) Ignore() *ModelAPIConfigUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ModelAPIConfigUpsertOne) DoNothing() *ModelAPIConfigUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ModelAPIConfigCreate.OnConflict
// documentation for more info.
func (u *ModelAPIConfigUpsertOne) Update(set func(*ModelAPIConfigUpsert)) *ModelAPIConfigUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ModelAPIConfigUpsert{UpdateSet: update})
	}))
	return u
}

// SetModelID sets the "model_id" field.
func (u *ModelAPIConfigUpsertOne) SetModelID(v uuid.UUID) *ModelAPIConfigUpsertOne {
	return u.Update(func(s *ModelAPIConfigUpsert) {
		s.SetModelID(v)
	})
}

// UpdateModelID sets the "model_id" field to the value that was provided on create.
func (u *ModelAPIConfigUpsertOne) UpdateModelID() *ModelAPIConfigUpsertOne {
	return u.Update(func(s *ModelAPIConfigUpsert) {
		s.UpdateModelID()
	})
}

// SetAPIBase sets the "api_base" field.
func (u *ModelAPIConfigUpsertOne) SetAPIBase(v string) *ModelAPIConfigUpsertOne {
	return u.Update(func(s *ModelAPIConfigUpsert) {
		s.SetAPIBase(v)
	})
}

// UpdateAPIBase sets the "api_base" field to the value that was provided on create.
func (u *ModelAPIConfigUpsertOne) UpdateAPIBase() *ModelAPIConfigUpsertOne {
	return u.Update(func(s *ModelAPIConfigUpsert) {
		s.UpdateAPIBase()
	})
}

// SetAPIKey sets the "api_key" field.
func (u *ModelAPIConfigUpsertOne) SetAPIKey(v string) *ModelAPIConfigUpsertOne {
	return u.Update(func(s *ModelAPIConfigUpsert) {
		s.SetAPIKey(v)
	})
}

// UpdateAPIKey sets the "api_key" field to the value that was provided on create.
func (u *ModelAPIConfigUpsertOne) UpdateAPIKey() *ModelAPIConfigUpsertOne {
	return u.Update(func(s *ModelAPIConfigUpsert) {
		s.UpdateAPIKey()
	})
}

// SetAPIVersion sets the "api_version" field.
func (u *ModelAPIConfigUpsertOne) SetAPIVersion(v string) *ModelAPIConfigUpsertOne {
	return u.Update(func(s *ModelAPIConfigUpsert) {
		s.SetAPIVersion(v)
	})
}

// UpdateAPIVersion sets the "api_version" field to the value that was provided on create.
func (u *ModelAPIConfigUpsertOne) UpdateAPIVersion() *ModelAPIConfigUpsertOne {
	return u.Update(func(s *ModelAPIConfigUpsert) {
		s.UpdateAPIVersion()
	})
}

// ClearAPIVersion clears the value of the "api_version" field.
func (u *ModelAPIConfigUpsertOne) ClearAPIVersion() *ModelAPIConfigUpsertOne {
	return u.Update(func(s *ModelAPIConfigUpsert) {
		s.ClearAPIVersion()
	})
}

// SetAPIHeader sets the "api_header" field.
func (u *ModelAPIConfigUpsertOne) SetAPIHeader(v string) *ModelAPIConfigUpsertOne {
	return u.Update(func(s *ModelAPIConfigUpsert) {
		s.SetAPIHeader(v)
	})
}

// UpdateAPIHeader sets the "api_header" field to the value that was provided on create.
func (u *ModelAPIConfigUpsertOne) UpdateAPIHeader() *ModelAPIConfigUpsertOne {
	return u.Update(func(s *ModelAPIConfigUpsert) {
		s.UpdateAPIHeader()
	})
}

// ClearAPIHeader clears the value of the "api_header" field.
func (u *ModelAPIConfigUpsertOne) ClearAPIHeader() *ModelAPIConfigUpsertOne {
	return u.Update(func(s *ModelAPIConfigUpsert) {
		s.ClearAPIHeader()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *ModelAPIConfigUpsertOne) SetCreatedAt(v time.Time) *ModelAPIConfigUpsertOne {
	return u.Update(func(s *ModelAPIConfigUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ModelAPIConfigUpsertOne) UpdateCreatedAt() *ModelAPIConfigUpsertOne {
	return u.Update(func(s *ModelAPIConfigUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ModelAPIConfigUpsertOne) SetUpdatedAt(v time.Time) *ModelAPIConfigUpsertOne {
	return u.Update(func(s *ModelAPIConfigUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ModelAPIConfigUpsertOne) UpdateUpdatedAt() *ModelAPIConfigUpsertOne {
	return u.Update(func(s *ModelAPIConfigUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *ModelAPIConfigUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for ModelAPIConfigCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ModelAPIConfigUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ModelAPIConfigUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("db: ModelAPIConfigUpsertOne.ID is not supported by MySQL driver. Use ModelAPIConfigUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ModelAPIConfigUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ModelAPIConfigCreateBulk is the builder for creating many ModelAPIConfig entities in bulk.
type ModelAPIConfigCreateBulk struct {
	config
	err      error
	builders []*ModelAPIConfigCreate
	conflict []sql.ConflictOption
}

// Save creates the ModelAPIConfig entities in the database.
func (maccb *ModelAPIConfigCreateBulk) Save(ctx context.Context) ([]*ModelAPIConfig, error) {
	if maccb.err != nil {
		return nil, maccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(maccb.builders))
	nodes := make([]*ModelAPIConfig, len(maccb.builders))
	mutators := make([]Mutator, len(maccb.builders))
	for i := range maccb.builders {
		func(i int, root context.Context) {
			builder := maccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ModelAPIConfigMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, maccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = maccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, maccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, maccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (maccb *ModelAPIConfigCreateBulk) SaveX(ctx context.Context) []*ModelAPIConfig {
	v, err := maccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (maccb *ModelAPIConfigCreateBulk) Exec(ctx context.Context) error {
	_, err := maccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (maccb *ModelAPIConfigCreateBulk) ExecX(ctx context.Context) {
	if err := maccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ModelAPIConfig.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ModelAPIConfigUpsert) {
//			SetModelID(v+v).
//		}).
//		Exec(ctx)
func (maccb *ModelAPIConfigCreateBulk) OnConflict(opts ...sql.ConflictOption) *ModelAPIConfigUpsertBulk {
	maccb.conflict = opts
	return &ModelAPIConfigUpsertBulk{
		create: maccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ModelAPIConfig.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (maccb *ModelAPIConfigCreateBulk) OnConflictColumns(columns ...string) *ModelAPIConfigUpsertBulk {
	maccb.conflict = append(maccb.conflict, sql.ConflictColumns(columns...))
	return &ModelAPIConfigUpsertBulk{
		create: maccb,
	}
}

// ModelAPIConfigUpsertBulk is the builder for "upsert"-ing
// a bulk of ModelAPIConfig nodes.
type ModelAPIConfigUpsertBulk struct {
	create *ModelAPIConfigCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ModelAPIConfig.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(modelapiconfig.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ModelAPIConfigUpsertBulk) UpdateNewValues() *ModelAPIConfigUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(modelapiconfig.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ModelAPIConfig.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ModelAPIConfigUpsertBulk) Ignore() *ModelAPIConfigUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ModelAPIConfigUpsertBulk) DoNothing() *ModelAPIConfigUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ModelAPIConfigCreateBulk.OnConflict
// documentation for more info.
func (u *ModelAPIConfigUpsertBulk) Update(set func(*ModelAPIConfigUpsert)) *ModelAPIConfigUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ModelAPIConfigUpsert{UpdateSet: update})
	}))
	return u
}

// SetModelID sets the "model_id" field.
func (u *ModelAPIConfigUpsertBulk) SetModelID(v uuid.UUID) *ModelAPIConfigUpsertBulk {
	return u.Update(func(s *ModelAPIConfigUpsert) {
		s.SetModelID(v)
	})
}

// UpdateModelID sets the "model_id" field to the value that was provided on create.
func (u *ModelAPIConfigUpsertBulk) UpdateModelID() *ModelAPIConfigUpsertBulk {
	return u.Update(func(s *ModelAPIConfigUpsert) {
		s.UpdateModelID()
	})
}

// SetAPIBase sets the "api_base" field.
func (u *ModelAPIConfigUpsertBulk) SetAPIBase(v string) *ModelAPIConfigUpsertBulk {
	return u.Update(func(s *ModelAPIConfigUpsert) {
		s.SetAPIBase(v)
	})
}

// UpdateAPIBase sets the "api_base" field to the value that was provided on create.
func (u *ModelAPIConfigUpsertBulk) UpdateAPIBase() *ModelAPIConfigUpsertBulk {
	return u.Update(func(s *ModelAPIConfigUpsert) {
		s.UpdateAPIBase()
	})
}

// SetAPIKey sets the "api_key" field.
func (u *ModelAPIConfigUpsertBulk) SetAPIKey(v string) *ModelAPIConfigUpsertBulk {
	return u.Update(func(s *ModelAPIConfigUpsert) {
		s.SetAPIKey(v)
	})
}

// UpdateAPIKey sets the "api_key" field to the value that was provided on create.
func (u *ModelAPIConfigUpsertBulk) UpdateAPIKey() *ModelAPIConfigUpsertBulk {
	return u.Update(func(s *ModelAPIConfigUpsert) {
		s.UpdateAPIKey()
	})
}

// SetAPIVersion sets the "api_version" field.
func (u *ModelAPIConfigUpsertBulk) SetAPIVersion(v string) *ModelAPIConfigUpsertBulk {
	return u.Update(func(s *ModelAPIConfigUpsert) {
		s.SetAPIVersion(v)
	})
}

// UpdateAPIVersion sets the "api_version" field to the value that was provided on create.
func (u *ModelAPIConfigUpsertBulk) UpdateAPIVersion() *ModelAPIConfigUpsertBulk {
	return u.Update(func(s *ModelAPIConfigUpsert) {
		s.UpdateAPIVersion()
	})
}

// ClearAPIVersion clears the value of the "api_version" field.
func (u *ModelAPIConfigUpsertBulk) ClearAPIVersion() *ModelAPIConfigUpsertBulk {
	return u.Update(func(s *ModelAPIConfigUpsert) {
		s.ClearAPIVersion()
	})
}

// SetAPIHeader sets the "api_header" field.
func (u *ModelAPIConfigUpsertBulk) SetAPIHeader(v string) *ModelAPIConfigUpsertBulk {
	return u.Update(func(s *ModelAPIConfigUpsert) {
		s.SetAPIHeader(v)
	})
}

// UpdateAPIHeader sets the "api_header" field to the value that was provided on create.
func (u *ModelAPIConfigUpsertBulk) UpdateAPIHeader() *ModelAPIConfigUpsertBulk {
	return u.Update(func(s *ModelAPIConfigUpsert) {
		s.UpdateAPIHeader()
	})
}

// ClearAPIHeader clears the value of the "api_header" field.
func (u *ModelAPIConfigUpsertBulk) ClearAPIHeader() *ModelAPIConfigUpsertBulk {
	return u.Update(func(s *ModelAPIConfigUpsert) {
		s.ClearAPIHeader()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *ModelAPIConfigUpsertBulk) SetCreatedAt(v time.Time) *ModelAPIConfigUpsertBulk {
	return u.Update(func(s *ModelAPIConfigUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ModelAPIConfigUpsertBulk) UpdateCreatedAt() *ModelAPIConfigUpsertBulk {
	return u.Update(func(s *ModelAPIConfigUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ModelAPIConfigUpsertBulk) SetUpdatedAt(v time.Time) *ModelAPIConfigUpsertBulk {
	return u.Update(func(s *ModelAPIConfigUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ModelAPIConfigUpsertBulk) UpdateUpdatedAt() *ModelAPIConfigUpsertBulk {
	return u.Update(func(s *ModelAPIConfigUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *ModelAPIConfigUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("db: OnConflict was set for builder %d. Set it on the ModelAPIConfigCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for ModelAPIConfigCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ModelAPIConfigUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
